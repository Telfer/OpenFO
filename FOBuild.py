{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ce07d2f1-4d72-421c-ae23-64520b17a1bf",
   "metadata": {},
   "outputs": [],
   "source": [
    "import FreeCAD, FreeCADGui\n",
    "import math\n",
    "\n",
    "class FOBuild:\n",
    "    def Activated(self):\n",
    "        FreeCAD.Console.PrintMessage(\"\")\n",
    "\n",
    "# =============================================================================\n",
    "\n",
    "    # Helper functions\n",
    "    def dist_2_points(p1, p2):\n",
    "        d = math.sqrt((p1[0] - p2[0]) ** 2 + (p1[1] - p2[1]) ** 2)\n",
    "        return d\n",
    "    \n",
    "    def proj_point_x(p1, p2, x_coord):\n",
    "        m = (p1[1] - p2[1]) / (p1[0] - p2[0])\n",
    "        c = p1[1] - (m * p1[0])\n",
    "        y_coord = (m * x_coord) + c\n",
    "        return y_coord\n",
    "    \n",
    "    def proj_point_y(p1, p2, y_coord):\n",
    "        m = (p1[1] - p2[1]) / (p1[0] - p2[0])\n",
    "        c = p1[1] - (m * p1[0])\n",
    "        x_coord = (y_coord - c) / m\n",
    "        return x_coord\n",
    "    \n",
    "    def point_on_line(x, y, offset):\n",
    "        d = math.sqrt((x[0] - y[0]) ** 2 + (x[1] - y[1]) ** 2)\n",
    "        t = offset / d\n",
    "        xt = ((1 - t) * x[0]) + (t * y[0])\n",
    "        yt = ((1 - t) * x[1]) + (t * y[1])\n",
    "        xx = [xt, yt, 0.0]\n",
    "        return xx\n",
    "    \n",
    "    def rot_point_coords(pt, center, angle, axis):\n",
    "        point = rs.AddPoint(pt)\n",
    "        point_rot = rs.RotateObject(point, center, angle, axis)\n",
    "        rs.UnselectAllObjects()\n",
    "        rs.SelectObject(point_rot)\n",
    "        point_coords = rs.GetPointCoordinates(preselect = True)\n",
    "        rs.DeleteObjects([point, point_rot])\n",
    "        return point_coords[0]\n",
    "    \n",
    "    def get_layer_point_coords(layer):\n",
    "        layer_bits = rs.ObjectsByLayer(layer)\n",
    "        point = layer_bits[0]\n",
    "        rs.UnselectAllObjects()\n",
    "        rs.SelectObject(point)\n",
    "        point_coords = rs.GetPointCoordinates(preselect = True)\n",
    "        return point_coords[0]\n",
    "    \n",
    "    def build_FO(side, thickness, heel_medial, heel_center, heel_lateral,\n",
    "                 arch_lateral, arch_medial, mtpj1, mtpj5, posting, heel_offset):\n",
    "        \n",
    "        ## forefoot offset\n",
    "        ff_offset = -5.0\n",
    "        \n",
    "        ## adjust for side if required\n",
    "        if side[2] < 0:\n",
    "            heel_medial[0] = heel_medial[0] * -1 \n",
    "            heel_center[0] = heel_center[0] * -1\n",
    "            heel_lateral[0] = heel_lateral[0] * -1 \n",
    "            arch_medial[0] = arch_medial[0] * -1 \n",
    "            mtpj1[0] = mtpj1[0] * -1 \n",
    "            mtpj5[0] = mtpj5[0] * -1 \n",
    "            arch_lateral[0] = arch_lateral[0] * -1\n",
    "        \n",
    "        \n",
    "        # =========================================================================\n",
    "        \n",
    "        ## Hindfoot posting adjustment\n",
    "        if heel_medial[2] > 20:\n",
    "            heel_medial[2] = 20\n",
    "        if heel_lateral[2] > 20:\n",
    "            heel_lateral[2] = 20\n",
    "        if heel_center[2] > 20:\n",
    "            heel_center[2] = 20\n",
    "        if posting != 0:\n",
    "            heel_medial = rot_point_coords(heel_medial, heel_center, posting, \n",
    "                                           [0.0, 1.0, 0.0])\n",
    "            heel_lateral = rot_point_coords(heel_lateral, heel_center, posting, \n",
    "                                            [0.0, 1.0, 0.0])\n",
    "            arch_medial = rot_point_coords(arch_medial, heel_center, posting, \n",
    "                                           [0.0, 1.0, 0.0])\n",
    "            arch_lateral = rot_point_coords(arch_lateral, heel_center, posting, \n",
    "                                            [0.0, 1.0, 0.0])\n",
    "        \n",
    "        \n",
    "        # =========================================================================\n",
    "        \n",
    "        # forefoot width adjustment\n",
    "        ff_d = dist_2_points(mtpj1, mtpj5)\n",
    "        \n",
    "        if (ff_d > 90):\n",
    "            x = (ff_d - 85) / 2\n",
    "            mtpj1 = [mtpj1[0] - x, mtpj1[1], mtpj1[2]]\n",
    "            mtpj5 = [mtpj5[0] + x, mtpj5[1], mtpj5[2]]\n",
    "        \n",
    "        \n",
    "        # =========================================================================\n",
    "        \n",
    "        # calculated landmarks\n",
    "        ## adjusted heel landmarks\n",
    "        heel_center_med_offset = ((heel_medial[0] - heel_center[0]) * heel_offset)\n",
    "        heel_center_medial = [heel_center[0] + heel_center_med_offset,\n",
    "                              heel_center[1] + 5, heel_center[2]]\n",
    "        if posting != 0:\n",
    "            heel_center_medial = rot_point_coords(heel_center_medial, heel_center, \n",
    "                                                  posting, [0.0, 1.0, 0.0])\n",
    "        heel_center_lat_offset = -1 * ((heel_lateral[0] - heel_center[0]) * heel_offset)\n",
    "        heel_center_lateral = [heel_center[0] - heel_center_lat_offset, \n",
    "                               heel_center[1] + 5, heel_center[2]]\n",
    "        if posting != 0:\n",
    "            heel_center_lateral = rot_point_coords(heel_center_lateral, heel_center, \n",
    "                                                   posting, [0.0, 1.0, 0.0])\n",
    "        \n",
    "        # adjusted mtpj landmarks\n",
    "        mtpj1_adj = [mtpj1[0] - 2.0, mtpj1[1] - 10.0, ff_offset]\n",
    "        mtpj5_adj = [mtpj5[0] + 2.0, mtpj5[1] - 10.0, ff_offset]\n",
    "        ff_center = [(mtpj1_adj[0] + mtpj5_adj[0]) / 2, \n",
    "                     ((mtpj1_adj[1] + mtpj5_adj[1]) / 2) + 4, ff_offset]\n",
    "        \n",
    "        # adjusted arch landmarks\n",
    "        if arch_lateral[2] > 12:    \n",
    "            arch_lateral[2] = 12\n",
    "        arch_medial_adj = proj_point_y(heel_medial, mtpj1_adj, arch_medial[1])\n",
    "        arch_medial_adj = [arch_medial_adj, arch_medial[1], arch_medial[2]]\n",
    "        arch_lateral_adj = proj_point_y(heel_lateral, mtpj5_adj, arch_lateral[1])\n",
    "        arch_lateral_adj = [arch_lateral_adj, arch_lateral[1], arch_lateral[2]]\n",
    "        \n",
    "        # adjust mtpj landmarks\n",
    "        mtpj1_prox1 = proj_point_y(mtpj1_adj, [arch_medial_adj[0], arch_medial_adj[1], ff_offset],\n",
    "                                   mtpj1_adj[1] - 2)\n",
    "        mtpj1_prox1 = [mtpj1_prox1 - 0.4, mtpj1_adj[1] - 2, ff_offset]\n",
    "        mtpj1_prox2 = proj_point_y(mtpj1_adj, [arch_medial_adj[0], arch_medial_adj[1], ff_offset], \n",
    "                                   mtpj1_adj[1] - 4)\n",
    "        mtpj1_prox2 = [mtpj1_prox2, mtpj1_adj[1] - 4, ff_offset + 0.5]\n",
    "        mtpj1_lateral1 = proj_point_x(ff_center, mtpj1_adj, mtpj1_adj[0] - 2)\n",
    "        mtpj1_lateral1 = [mtpj1_adj[0] - 2, mtpj1_lateral1 -0.4, ff_offset]\n",
    "        mtpj1_lateral2 = proj_point_x(ff_center, mtpj1_adj, mtpj1_adj[0] - 4)\n",
    "        mtpj1_lateral2 = [mtpj1_adj[0] - 4, mtpj1_lateral2, ff_offset]\n",
    "        mtpj5_prox1 = proj_point_y(mtpj5_adj, [arch_lateral_adj[0], arch_lateral_adj[1], ff_offset], \n",
    "                                   mtpj5_adj[1] - 2)\n",
    "        mtpj5_prox1 = [mtpj5_prox1 + 0.4, mtpj5_adj[1] - 2, ff_offset]\n",
    "        mtpj5_prox2 = proj_point_y(mtpj5_adj, [arch_lateral_adj[0], arch_lateral_adj[1], ff_offset], \n",
    "                                   mtpj5_adj[1] - 4)\n",
    "        mtpj5_prox2 = [mtpj5_prox2, mtpj5_adj[1] - 4, ff_offset + 0.5]\n",
    "        mtpj5_lateral1 = proj_point_x(ff_center, mtpj5_adj, mtpj5_adj[0] + 2)\n",
    "        mtpj5_lateral1 = [mtpj5_adj[0] + 2, mtpj5_lateral1 -0.4, ff_offset]\n",
    "        mtpj5_lateral2 = proj_point_x(ff_center, mtpj5_adj, mtpj5_adj[0] + 4)\n",
    "        mtpj5_lateral2 = [mtpj5_adj[0] + 4, mtpj5_lateral2, ff_offset]\n",
    "        arch_mid = [(arch_medial[0] + arch_lateral[0]) / 2,\n",
    "                    (arch_medial[1] + arch_lateral[1]) / 2, 5.0]\n",
    "        \n",
    "        \n",
    "        # =========================================================================\n",
    "        \n",
    "        # make curves\n",
    "        medial_curve = rs.AddInterpCurve([heel_center, heel_center_medial,\n",
    "                                          heel_medial, arch_medial_adj, \n",
    "                                          mtpj1_prox2, mtpj1_prox1, mtpj1_lateral1,\n",
    "                                          mtpj1_lateral2,\n",
    "                                          ff_center], degree = 3, knotstyle = 2)\n",
    "        lateral_curve = rs.AddInterpCurve([heel_center, heel_center_lateral,\n",
    "                                           heel_lateral, arch_lateral_adj, \n",
    "                                           mtpj5_prox2, mtpj5_prox1, mtpj5_lateral1,\n",
    "                                           mtpj5_lateral2,\n",
    "                                           ff_center], degree = 3, knotstyle = 2)\n",
    "        center_curve = rs.AddInterpCurve([heel_center, \n",
    "                                          [(heel_medial[0] + heel_lateral[0]) / 2, \n",
    "                                          (heel_medial[1] + heel_lateral[1]) / 2, 0.0],\n",
    "                                          arch_mid, ff_center])\n",
    "        cross_curve_heel = rs.AddInterpCurve([heel_medial, \n",
    "                                              [(heel_medial[0] + heel_lateral[0]) / 2, \n",
    "                                               (heel_medial[1] + heel_lateral[1]) / 2, 2.0], \n",
    "                                              heel_lateral])\n",
    "        cross_curve_arch = rs.AddInterpCurve([arch_medial_adj, arch_mid, \n",
    "                                              arch_lateral_adj])\n",
    "        \n",
    "        \n",
    "        # =========================================================================\n",
    "        \n",
    "        # make top surface\n",
    "        top_srf = rs.AddNetworkSrf([medial_curve, lateral_curve, center_curve, \n",
    "                                    cross_curve_heel, cross_curve_arch])\n",
    "        \n",
    "        \n",
    "        # =========================================================================\n",
    "        \n",
    "        # make bottom surface \n",
    "        bottom_srf = rs.CopyObject(top_srf)\n",
    "        bottom_srf = rs.MoveObject(bottom_srf, [0.0, 0.0, -3.0])\n",
    "        \n",
    "        \n",
    "        # =========================================================================\n",
    "        \n",
    "        # make edges\n",
    "        edges = rs.DuplicateSurfaceBorder(top_srf)\n",
    "        ext_line = rs.AddLine([0.0, 0.0, 0.0], [0.0, 0.0, -3.0])\n",
    "        edge_srf = rs.ExtrudeCurve(edges, ext_line)\n",
    "        rs.DeleteObjects([edges, ext_line])\n",
    "        \n",
    "        \n",
    "        # =========================================================================\n",
    "        \n",
    "        # add heel \n",
    "        ## heel outline\n",
    "        heel_curve = rs.AddInterpCurve([[heel_medial[0] - 3.0, \n",
    "                                         heel_medial[1] + 10.0, 0.0],\n",
    "                                        [heel_medial[0] - 3.0, \n",
    "                                         heel_medial[1] + 1.0, 0.0],\n",
    "                                        [heel_medial[0] - 3.0, heel_medial[1], 0.0], \n",
    "                                        [heel_center_medial[0] - 3.0, \n",
    "                                         heel_center_medial[1] + 3.0, 0.0],\n",
    "                                        [heel_center[0], heel_center[1] + 3.0, 0.0],\n",
    "                                        [heel_center_lateral[0] + 3.0, \n",
    "                                         heel_center_lateral[1] + 4.0, 0.0],\n",
    "                                        [heel_lateral[0] + 3.0, heel_lateral[1], 0.0],\n",
    "                                        [heel_lateral[0] + 3.0, \n",
    "                                         heel_lateral[1] + 1.0, 0.0],\n",
    "                                        [heel_lateral[0] + 3.0, \n",
    "                                         heel_lateral[1] + 10.0, 0.0]],\n",
    "                                        knotstyle = 2)\n",
    "        heel_curve2 = rs.OffsetCurve(heel_curve, [0, 0, 0], 4.0)\n",
    "        heel_line = rs.AddLine([heel_medial[0] - 3.0, heel_medial[1] + 10.0, 0.0], \n",
    "                               [heel_lateral[0] + 3.0, heel_lateral[1] + 10.0, 0.0])\n",
    "        heel_line2 = rs.AddLine([heel_medial[0] - 7.0, heel_medial[1] + 10.0, 0.0], \n",
    "                                [heel_lateral[0] + 7.0, heel_lateral[1] + 10.0, 0.0])\n",
    "        heel_curve_c = rs.JoinCurves([heel_curve, heel_line])\n",
    "        \n",
    "        ## heel bottom surface\n",
    "        heel_bottom_srf = rs.AddEdgeSrf([heel_curve2, heel_line2])\n",
    "        heel_bottom_srf = rs.MoveObject(heel_bottom_srf, [0.0, 0.0, -4.0])\n",
    "        \n",
    "        ## heel bottom curve\n",
    "        bot_rad = rs.AddArc(rs.WorldZXPlane(), 4.0, 90.0)\n",
    "        bot_rad = rs.RotateObject(bot_rad, [0, 0, 0], 90, [0, 1, 0])\n",
    "        bot_rad = rs.MoveObject(bot_rad, [heel_medial[0] - 7.0, \n",
    "                                          heel_medial[1] + 10.0, 0.0])\n",
    "        heel_bottom_edge = rs.AddSweep1(heel_curve, [bot_rad])\n",
    "        \n",
    "        ## heel sides\n",
    "        ext_line = rs.AddLine([0.0, 0.0, 0.0], [0.0, 0.0, 30.0])\n",
    "        heel_edge = rs.ExtrudeCurve(heel_curve, ext_line)\n",
    "        \n",
    "        ## heel front1\n",
    "        bot_rad2 = rs.AddArc(rs.WorldZXPlane(), 4.0, 90.0)\n",
    "        bot_rad2 = rs.RotateObject(bot_rad2, [0, 0, 0], 180, [0, 1, 0])\n",
    "        bot_rad2 = rs.MoveObject(bot_rad2, [heel_lateral[0] + 7.0, \n",
    "                                            heel_lateral[1] + 10.0, 0.0])\n",
    "        top_edge = rs.AddLine([heel_medial[0] - 3.0, heel_medial[1] + 10.0, 0.0],\n",
    "                              [heel_lateral[0] + 3.0, heel_lateral[1] + 10.0, 0.0])\n",
    "        bott_edge = rs.AddLine([heel_medial[0] - 5.0, heel_medial[1] + 10.0, -2.0], \n",
    "                               [heel_lateral[0] + 5.0, heel_lateral[1] + 10.0, -2.0])\n",
    "        front_edge = rs.AddEdgeSrf([bot_rad, bot_rad2, top_edge, bott_edge])\n",
    "        \n",
    "        ## heel front 2\n",
    "        med_line = rs.AddLine([heel_medial[0] - 3.0, heel_medial[1] + 10.0, 0.0], \n",
    "                              [heel_medial[0] - 3.0, heel_medial[1] + 10.0, 30.0])\n",
    "        lat_line = rs.AddLine([heel_lateral[0] + 3.0, heel_lateral[1] + 10.0, 0.0],\n",
    "                              [heel_lateral[0] + 3.0, heel_lateral[1] + 10.0, 30.0])\n",
    "        top_line = rs.AddLine([heel_medial[0] - 3.0, heel_medial[1] + 10.0, 30.0],\n",
    "                              [heel_lateral[0] + 3.0, heel_lateral[1] + 10.0, 30.0])\n",
    "        front_edge2 = rs.AddEdgeSrf([med_line, top_line, lat_line, top_edge])\n",
    "        \n",
    "        ## heel top surface\n",
    "        heel_srf = rs.JoinSurfaces([heel_bottom_srf, heel_bottom_edge, heel_edge, \n",
    "                                    front_edge, front_edge2])\n",
    "        heel_srf = rs.MoveObject(heel_srf, [0.0, 0.0, -2.0])\n",
    "        rot_center_x = (heel_lateral[0] + heel_medial[0]) / 2\n",
    "        rot_center_y = (heel_lateral[1] + heel_medial[1]) / 2\n",
    "        heel_srf = rs.RotateObject(heel_srf, [rot_center_x, rot_center_y, -4.0], 4.0, [1.0, 0.0, 0.0])\n",
    "        heel_srf = rs.MoveObject(heel_srf, [0.0, 2.0, 0.0])\n",
    "        bottom_srf_w_heel = rs.BooleanIntersection(bottom_srf, heel_srf)\n",
    "        \n",
    "        ## tidy up objects\n",
    "        rs.DeleteObjects([ext_line, heel_curve_c, heel_curve, heel_line, bot_rad, \n",
    "                          bot_rad2, med_line, lat_line, top_line, top_edge, bott_edge,\n",
    "                          heel_edge, front_edge, front_edge2, heel_bottom_edge,\n",
    "                          heel_bottom_srf, heel_line2, heel_curve2])\n",
    "        \n",
    "        \n",
    "        # =========================================================================\n",
    "        \n",
    "        # create solid\n",
    "        FO = rs.JoinSurfaces([top_srf, edge_srf, bottom_srf_w_heel], \n",
    "                             delete_input = True)\n",
    "        \n",
    "        \n",
    "        # =========================================================================\n",
    "        \n",
    "        # trim forefoot of FO\n",
    "        corners = [[400.0, 400.0, -20.0], [-400.0, 400.0, -20.0], \n",
    "                   [-400.0, ff_center[1] - 70.0, -20.0], \n",
    "                   [400.0, ff_center[1] - 70.0, -20.0],\n",
    "                   [400.0, 200.0, ff_offset - 2.0], [-400.0, 200.0, ff_offset - 2.0], \n",
    "                   [-400.0, ff_center[1] - 70.0, ff_offset - 2.0], \n",
    "                   [400.0, ff_center[1] - 70.0, ff_offset - 2.0]]\n",
    "        box = rs.AddBox(corners)\n",
    "        FO = rs.BooleanDifference(FO, box)\n",
    "        \n",
    "        \n",
    "        # =========================================================================\n",
    "        \n",
    "        ## Correct for side if required\n",
    "        if side[2] < 0:\n",
    "             FO = rs.MirrorObject(FO, [0.0, 0.0, 0.0], [0.0, 1.0, 0.0])\n",
    "        \n",
    "        # tidy up\n",
    "        rs.DeleteObjects([medial_curve, lateral_curve, center_curve, \n",
    "                          cross_curve_heel, cross_curve_arch])\n",
    "        \n",
    "        \n",
    "        # =========================================================================\n",
    "        \n",
    "        ## return FO\n",
    "        return FO\n",
    "    \n",
    "    \n",
    "    # =============================================================================\n",
    "    \n",
    "    # Add Layers\n",
    "    rs.AddLayer(\"Neutral\")\n",
    "    rs.AddLayer(\"Medial 5\")\n",
    "    rs.AddLayer(\"Medial 10\")\n",
    "    rs.AddLayer(\"Lateral 5\")\n",
    "    \n",
    "    \n",
    "    # =============================================================================\n",
    "    \n",
    "    ## Get side\n",
    "    rs.CurrentLayer(\"Side\")\n",
    "    side = rs.ObjectsByLayer(\"Side\")\n",
    "    side = side[0]\n",
    "    rs.UnselectAllObjects()\n",
    "    rs.SelectObject(side)\n",
    "    side = rs.GetPointCoordinates(preselect = True)\n",
    "    side = side[0]\n",
    "    \n",
    "    \n",
    "    # =============================================================================\n",
    "    ### Neutral FO ###\n",
    "    # =============================================================================\n",
    "    \n",
    "    # change layer\n",
    "    rs.CurrentLayer(\"Neutral\")\n",
    "    \n",
    "    ## Anatomical landmarks\n",
    "    heel_medial = get_layer_point_coords(\"Heel Medial\")\n",
    "    heel_center = get_layer_point_coords(\"Heel Center\")\n",
    "    heel_lateral = get_layer_point_coords(\"Heel Lateral\")\n",
    "    arch_medial = get_layer_point_coords(\"Arch Medial\")\n",
    "    mtpj1 = get_layer_point_coords(\"MTPJ1\")\n",
    "    mtpj5 = get_layer_point_coords(\"MTPJ5\")\n",
    "    arch_lateral = get_layer_point_coords(\"Arch Lateral\")\n",
    "    \n",
    "    # build FO\n",
    "    FO_Neutral = build_FO(side, 3.0, heel_medial, heel_center, heel_lateral,\n",
    "                          arch_lateral, arch_medial, mtpj1, mtpj5, 0, 0.65)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
